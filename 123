echo "# -" >> README.md
git init
git add README.md
git commit -m "first commit"
git branch -M main
git remote add origin https://github.com/zlbzincum/-.git
git push -u origin main
#include <cstdio>
#include <cstring>
#include <cmath>
#include <cstdlib>
#include <iostream>
#include <algorithm>
#include <conio.h>
#include <time.h>
#include <windows.h>

using namespace std;
FILE *fp_book, *fp_student, *fp_password;
const int N = 15;
typedef long long LL;
int num;
int temp;
int numID;
int atemp;

int  rerp=1;//排序
int rerl=1;
int rerc=1;//查找 
int rers=1;//记录删除 
int rerx=1;//
int rer =1;//记录要不要退出 
int logo;
int h = 0; // 登录失败次数 999999
char theID[30];
int choice;
// 图书信息
typedef struct
{
    char name[N];
    char num_ISBN[N];
    char writer[N];
    char publisher[N];
    char time[N];
    int num;
    double price;
} Book;
// 借书学生信息
typedef struct Student
{
    char name[N];
    int book_num;    // 书的数量不能超过5本
    int student_num; // 学号
    char tel[20];    // 电话
    Book books[5];
    int sexes;
    //int r; // 信誉分
    Student *next;
} Student;
// 借书同学的节点信息
typedef struct studNode
{
    Student stud;
    struct studNode *next;
} studNode;
// 管理员信息
struct idnum
{
    char AcName[20];
    char password[15];
    char nickname[20];
} user[30];
// 图书节点信息
typedef struct Node
{
    Book books;
    struct Node *next;
} Node;
Book tempBook;
Student tempStudent;
// Node *;

// 创建表头： 带节点的表头
Node *createHead()
{
    Node *headNode = new Node;
    headNode->next = NULL;
    return headNode;
}
// 创建表头： 带节点的学生表头
studNode *createStudHead()
{
    studNode *headNode = new studNode;
    headNode->next = NULL;
    return headNode;
}
// 创建节点： 插入必备
Node *createNode(Book data)
{
    Node *newNode = new Node;
    newNode->books = data; //////////
    newNode->next = NULL;
    return newNode;
}
studNode *createStudNode(Student data)
{
    studNode *newNode = new studNode;
    newNode->stud = data; //////////
    newNode->next = NULL;
    return newNode;
}

Node *Blist ;         // 对于图书操作的操作的链表
Node *Dlist ;         // 对于密码账号登录操作的链表
studNode *Slist ; // 对于借书学生信息的链表
void hhk(void)                      // 打印操作错误
{
    printf("\n");
    printf("\t\t\t  操作错误，请从新选择操作选项！！\n\n");
    system("PAUSE");
}
//系统功能介绍
void FuactionIntrod(void)
{
	system("cls");
	printf("本系统能执行以下操作:\n\n");
	printf("一、登录界面功能介绍\n\n");
	printf("1.登录账号\n\n2.注册新账号\n\n3.密码找回\n\n4.修改密码\n\n\t\t\t   ");
	system("PAUSE");
	system("cls");
    printf("二、图书信息管理系统功能介绍\n\n");
    printf("1. 查找功能\n\n");
    printf("1）按书号查找\n2）按书名查找\n3）按作者查找\n4）按ISBN查找\n5）输出所有图书信息\n6）根据输入字符串查找相关内容\n");
    printf("2. 排序功能\n\n");
    printf("1）按书名首字母升序\n2）按书名首字母降序\n3）按单价升序排序\n4）按单价降序排序\n5）按出版社首字母升序\n6）按出版社首字母降序\n7）按ISBN升序\n8）按ISBN降序\n\n");
    printf("3. 修改功能\n\n");
    printf("1）修改书名\n2）修改出版社\n3）修改ISBN\n4）修改价钱\n5）修改作者\n6）修改数量\n\n");
    printf("4. 恢复图书信息\n\n  如错误删除图书信息，可恢复上一次备份的图书信息\n\n");
    printf("5. 备份图书信息\n\n\t\t\t   ");
    printf("6. 删除功能\n\n");
    printf("1）按照书名删除\n2）按照出版社删除\n3）按照ISBN删除\n4）按照作者删除\n5）删除所有\n\n");
    printf("7. 查看某位同学的借书情况\n\n");
    printf("8. 查看借阅同学名单\n\n");
    system("PAUSE");
	system("cls");
    printf("三、图书借还系统功能介绍\n\n");
    printf("1.借阅图书功能\n\n");
    printf("此功能可使用户借阅本系统中现存的图书\n\n");
	printf("2.还书功能\n\n");
	printf("此功能可方便用户还书\n\n");
    printf("3. 用户借书还书记录查询功能\n\n");
    printf("此功能可查询个人借书和还书记录\n\n");
    printf("4. 用户借书还书信誉查询功能\n\n");
    printf("此功能可查询借书者的个人信誉值，若信誉值低于60将不能再通过本系统借书，同时，每一年年末都会对信誉值进行统计，\n");
    printf("并将所有用户信誉值恢复为100。\n\n");
    printf("信誉值扣除标准：\n\n");
    printf("1）借的书需在两个工作日内归还，逾期还书  每次扣除信誉值 5。\n");
    printf("2）对图书造成损坏或丢失的  每次扣除信誉值 10 ， 并原价赔偿。\n");
    printf("3）超过还书时间一个工作日的，信誉值将被直接清零，并不能在本系统进行任何操作。\n\n");
    printf("四、切换账号功能\n\n 可以切换账号\n\n\t\t\t   ");
    system("PAUSE");
    system("cls");
}
// 数据数加载到内存
void loaduu(void)
{
    FILE *fp;
    fp = fopen("数据个数.txt", "r");
    
    fscanf(fp, "%d", &num);
    fscanf(fp, "%d", &temp);
    fclose(fp);
    numID = temp; // k表示什么数据？
}
// 数据数加载到磁盘
void saveuu(void)
{
    FILE *fp;
    fp = fopen("数据个数.txt", "w");
    fprintf(fp, "%d\n", num);
    fprintf(fp, "%d\n", numID);
    fclose(fp);
}
// 打印图书链表
void printList(Node *headNode)
{
    printf("书名\t图书编号\t作者\t出版社\t数量\t价格\n");
    Node *pMove = headNode->next;
    while (pMove)
    {
        printf("%s\t", pMove->books.name);
        printf("%s\t\t", pMove->books.num_ISBN);
        printf("%s\t", pMove->books.writer);
        printf("%s\t", pMove->books.publisher);
        printf("%d\t", pMove->books.num);
        printf("%.3lf\n", pMove->books.price);
        pMove = pMove->next;

    }

    system("pause");
}
// 打印借书同学---------------------------------------------
void printStuList(studNode *headNode)
{
    printf("人名\t图书编号\t学号\t电话号码\n");
    studNode *pMove = headNode->next;
    while (pMove)
    {
        printf("%s\t%d\t%d\t%s\n", pMove->stud.name, pMove->stud.book_num, pMove->stud.student_num, pMove->stud.tel);
        pMove = pMove->next;
    }
}
// 链表的人名查找
studNode *searchStuNode(studNode *headNode, char *stuName)
{
    studNode *posNode = headNode->next;
    while (posNode != NULL && strcmp(posNode->stud.name, stuName))
    {
        posNode = posNode->next;
    }
    return posNode;
}

// 打印同学所借书的详细信息
void printBorrowList(studNode *headNode, char *studName)
{
    studNode *pMove = searchStuNode(headNode, studName);
    printf("%s%d%d%s", pMove->stud.name, pMove->stud.book_num, pMove->stud.student_num, pMove->stud.tel);
    for (int i = 0; i < pMove->stud.book_num; i++)
    {
        printf("%s%s%s%s%d%lf", pMove->stud.books[i].name, pMove->stud.books[i].num_ISBN, pMove->stud.books[i].writer, pMove->stud.books[i].publisher, pMove->stud.books[i].num, pMove->stud.books[i].price);
    }
}

// 表头法插入法(书节点)
void insertNode(Node *headNode, Book data)
{
    Node *newNode = createNode(data);
    newNode->next = headNode->next;
    headNode->next = newNode;
}
// 表头法插入法（学生节点）
void insertStudNode(studNode *headNode, Student data)
{
    studNode *newNode = createStudNode(data);
    newNode->next = headNode->next;
    headNode->next = newNode;
}
// 指定删除节点(根据书名删除）
void deleteNode(Node *headNode, char *bookName)
{
    Node *leftNode = headNode;
    Node *posNode = headNode->next;
    while (posNode != NULL && strcmp(posNode->books.name, bookName)) // 字符串比较来找到想要的书名
    {
        leftNode = posNode;
        posNode = posNode->next;
    }
    if (posNode == NULL)
        return;
    else
    {
        cout << "删除成功！" << endl;
        leftNode->next = posNode->next;
        delete (posNode);
        posNode = NULL;
    }
}
// 指定删除节点(根据作者删除）
void deleteWriterNode(Node *headNode, char *writer)
{
	while(1){
    Node *leftNode = headNode;
    Node *posNode = headNode->next;
    while (posNode != NULL && strcmp(posNode->books.writer, writer)) // 字符串比较来找到想要的书名
    {
        leftNode = posNode;
        posNode = posNode->next;
    }
    if (posNode == NULL)
        return;
    else
    {
        cout << "删除成功！" << endl;
        leftNode->next = posNode->next;
        delete (posNode);
        posNode = NULL;
    }
}
}

// 指定删除节点(根据出版社删除）
void deletePublisherNode(Node *headNode, char *publisher)
{
	while(1){
	
    Node *leftNode = headNode;
    Node *posNode = headNode->next;
    while (posNode != NULL && strcmp(posNode->books.publisher, publisher)) // 字符串比较来找到想要的书名
    {
        leftNode = posNode;
        posNode = posNode->next;
    }
    if (posNode == NULL)
        return;
    else
    {
        cout << "删除成功！" << endl;
        leftNode->next = posNode->next;
        delete (posNode);
        posNode = NULL;
    }
}
}
// 指定删除节点(根据ISBN删除）
void deleteISBNNode(Node *headNode, char *ISBN)
{
    Node *leftNode = headNode;
    Node *posNode = headNode->next;
    while (posNode != NULL && strcmp(posNode->books.num_ISBN,ISBN )) // 字符串比较来找到想要的书名
    {
        leftNode = posNode;
        posNode = posNode->next;
    }
    if (posNode == NULL)
    {
		cout<<"输入错误，删除失败"<<endl; 
        return;
    }
    else
    {
        cout << "删除成功！" << endl;
        leftNode->next = posNode->next;
        delete (posNode);
        posNode = NULL;
    }
}
// 链表的书名查找
Node *searchBookNode(Node *headNode, char *bookName)
{
    Node *posNode = headNode->next;
    while (posNode != NULL && strcmp(posNode->books.name, bookName))
    {
        posNode = posNode->next;
    }
    return posNode;
}

// 链表的ISBN查找
Node *searchISBNNode(Node *headNode, char *ISBN)
{
    Node *posNode = headNode->next;
    while (posNode != NULL && strcmp(posNode->books.num_ISBN, ISBN))
    {
        posNode = posNode->next;
    }
    return posNode;
}


// 查找带相关字符串的书名并打印 
void printSearch(Node *headNode, char *bookName)
{
    Node *posNode = headNode->next;
    while (posNode != NULL )
    {
    	if(strstr(posNode->books.name, bookName)!=NULL)
		printf("%s\n",posNode -> books.name); 
        posNode = posNode->next;
    }
}
// 给定出版社名称，查找并显示该出版社的所有图书的信息；
void printSearchPublisher(Node *headNode, char *publisher )
{
    Node *posNode = headNode->next;
    while (posNode != NULL )
    {
    	if(strcmp(posNode->books.publisher, publisher))
		{
			printf( "%s\t%s\t\t%s\t%s\t%d\t%lf\n", posNode->books.name, posNode->books.num_ISBN, posNode->books.writer, posNode->books.publisher, posNode->books.num, posNode->books.price);
		}
        posNode = posNode->next;
    }
}

// 冒泡排序链表(按照价格排序)正序 
void sortPriceList1(Node *headNode)
{
    for (Node *i = headNode->next; i != NULL; i = i->next)
    {
        for (Node *j = headNode->next; j != NULL; j = j->next)
        {
            if (j->next!=NULL&&j->books.price > j->next->books.price)
            {
                Book tempData = j->books;
                j->books = j->next->books;
                j->next->books = tempData;
            }
        }
    }
    printList(headNode);
}
// 冒泡排序链表(按照价格排序)倒序 
void sortPriceList2(Node *headNode)
{
    for (Node *i = headNode->next; i != NULL; i = i->next)
    {
        for (Node *j = headNode->next; j != NULL; j = j->next)
        {
            if (j->next!=NULL&&j->books.price < j->next->books.price)
            {
                Book tempData = j->books;
                j->books = j->next->books;
                j->next->books = tempData;
            }
        }
    }
    printList(headNode);
}
// 删除所有信息********************************************
void deleteAll()
{

    if ((fp_book = fopen("book.txt", "w")) == NULL)
    {
        printf("数据库加载失败，请重启本系统！\n");
        return;
    }
    fprintf(fp_book, "0");
    printf("\t\t\t删除成功，若想恢复请恢复备份！！\n\t\t\t");
    fclose(fp_book);
    num = 0;
    saveuu();
    system("PAUSE");
    system("cls");
}

// 冒泡排序（按照书名排序）从大到小 
void sortNameList2(Node *headNode)
{
    for (Node *i = headNode->next; i != NULL; i = i->next)
    {
        for (Node *j = headNode->next; j != NULL; j = j->next)
        {
            if (j->next!=NULL&&((j->books.name, j->next->books.name) <0))
            {
                Book tempData = j->books;
                j->books = j->next->books;
                j->next->books = tempData;
            }
        }
    }
    printList(headNode);
}
// 冒泡排序（按照出版社排序）从大到小 
void sortPublisherList2(Node *headNode)
{
    for (Node *i = headNode->next; i != NULL; i = i->next)
    {
        for (Node *j = headNode->next; j != NULL; j = j->next)
        {
            if ((j->next!=NULL)&&(j->books.publisher, j->next->books.publisher) <0)
            {
                Book tempData = j->books;
                j->books = j->next->books;
                j->next->books = tempData;
            }
        }
    }
    printList(headNode);
}
// 冒泡排序（按照出版社排序） 正序 
void sortPublisherList1(Node *headNode)
{
    for (Node *i = headNode->next; i != NULL; i = i->next)
    {
        for (Node *j = headNode->next; j != NULL; j = j->next)
        {
            if (j->next!=NULL&&(j->books.publisher, j->next->books.publisher) >0)
            {
                Book tempData = j->books;
                j->books = j->next->books;
                j->next->books = tempData;
            }
        }
    }
    printList(headNode);
}
// 冒泡排序（按照书名排序）正序 
void sortNameList1(Node *headNode)
{
    for (Node *i = headNode->next; i != NULL; i = i->next)
    {
        for (Node *j = headNode->next; j != NULL; j = j->next)
        {
            if (j->next!=NULL&&strcmp(j->books.name, j->next->books.name) == 1)
            {
                Book tempData = j->books;
                j->books = j->next->books;
                j->next->books = tempData;
            }
        }
    }
    printList(headNode);
}

// 冒泡排序（按照ISBN排序）正序 
void sortISBNList1(Node *headNode)
{
    for (Node *i = headNode->next; i != NULL; i = i->next)
    {
        for (Node *j = headNode->next; j != NULL; j = j->next)
        {
            if (j->next!=NULL&&strcmp(j->books.num_ISBN, j->next->books.num_ISBN) == 1)
            {
                Book tempData = j->books;
                j->books = j->next->books;
                j->next->books = tempData;
            }
        }
    }
    printList(headNode);
}

// 冒泡排序（按照ISBN排序）倒序 

void sortISBNList2(Node *headNode)
{
    for (Node *i = headNode->next; i != NULL; i = i->next)
    {
        for (Node *j = headNode->next; j != NULL; j = j->next)
        {
            if (j->next!=NULL&&strcmp(j->books.num_ISBN, j->next->books.num_ISBN) == -1)
            {
                Book tempData = j->books;
                j->books = j->next->books;
                j->next->books = tempData;
            }
        }
    }
    printList(headNode);
}


// 检验账号的合法性*****************************************************************************************************************************************************
void CheckUser(void)
{
    int i, flag = 0, identify1, identify2;
    char tempID[20], tempPassword[20];
    printf("\t\t\t\t请输入登录账号：\n\n\t\t\t\t ");
    scanf("%s", tempID);
    for (i = 0; i < numID; i++)
    {
        if (strcmp(user[i].AcName, tempID) == 0)
        {
            strcpy(theID, tempID);
            flag = 1;
            break;
        }
    }
    if (!flag)
    {
        printf("\n\t\t\t\t此账号还未注册！！\n\n\t\t\t   ");
        system("PAUSE");
        system("cls");
        return;
    }
    printf("\t\t\t\t请输入密码：\n\n\t\t\t\t ");
    int j=0;
    while (true)
	{
		char ch;
		ch=getch();//无回显的输入
		tempPassword[j++] = ch;
		if (ch=='\r')//getch()函数如果读到回车符号返回'/r'
		{
			tempPassword[--j] = '\0';
			break;
		}
		putchar('*');
}
cout<<endl;
    if (strcmp(user[i].password, tempPassword) == 0)
    {
        h = 0;
        flag = 2;
    }
    if (flag == 1)
    {
        system("cls");
        printf("\t\t\t\t密码错误！！\n\n\t\t\t   ");
        system("PAUSE");
        system("cls");
        h++;
        return;
    }
    else if (flag == 2)
    {
        printf("\t\t\t   请输入下面的验证码：\n");
    there:
        srand((unsigned)time(NULL));
        identify1 = rand() % 90000 + 10000; // 生产5位数的验证码
        printf("\n\t\t\t\t  %d\n\t\t\t\t  ", identify1);
        atemp = scanf("%d", &identify2);
        if (!atemp)
        {
            printf("\t\t\t输入错误！！\n请重新输入：");
            goto there;
            system("PAUSE");

            return;
        }
        if (identify1 != identify2)
        {
            printf("\n\t\t\t验证码错误！！\n");
            system("PAUSE");
            system("cls");
            return;
        }
        logo = 1;
    }
    system("cls");
}
// 将账号存入磁盘
void saveUser(void)
{
    int i;
    FILE *fp;
    fp = fopen("账号.txt", "w");
    for (i = 0; i <= numID; i++)
    {
        fprintf(fp, "%s\t", user[i].AcName);
        fprintf(fp, "%s\t", user[i].password);
        fprintf(fp, "%s\n", user[i].nickname);
    }
    fclose(fp);
}
// 新建账号
void addUser(void)
{

    printf("\t\t\t+========================================+\n");
    printf("\t\t\t+           图书管理系统注册平台         +\n");
    printf("\t\t\t+========================================+\n");
    FILE *fp;
    int j = 0; // j标记是否重新申请
    char password2[12], strID[30];
    printf("\t\t\t请输入账号：\n\n\t\t\t  ");
    scanf("%s", strID);
    for (int i = 0; i < numID; i++)
    {
        if (strcmp(user[i].AcName, strID) == 0)
        {
            printf("\t\t\t该账号已被注册，请重新申请！！\n\n\t\t\t   ");
            system("PAUSE");
            return;
        }
    }
    strcpy(user[numID].AcName, strID);
    printf("\t\t\t请输入密码（密码长度不超过十个字符）：\n\n\t\t\t  ");
    scanf("%s", user[numID].password);
    printf("\t\t\t请再输入一次密码：\n\n\t\t\t  ");
    scanf("%s", password2);
    if (strcmp(user[numID].password, password2) != 0)
    {
        printf("\t\t\t两次密码不一致请从新申请\n\n\t\t\t");
        system("PAUSE");
        system("cls");
        printf("\n");
        addUser();
        j = 1;
    }
    if (j)
        return;
    printf("\n\t\t\t请输入昵称\n\n\t\t\t  ");
    scanf("%s", user[numID].nickname);
    saveUser();
    printf("\t\t\t\t账号申请成功！！\n\n\t\t\t");
    numID++;
    saveUser();
    system("PAUSE");
    system("cls");
}
// 找回密码
void findPassword(void)
{
    int i;
    char a[30];
    printf("\t\t\t请输入要找回的账号：\n\t\t\t\t");
    scanf("%s", a);
    for (i = 0; i < numID; i++)
        if (strcmp(user[i].AcName, a) == 0)
        {
            printf("请输入昵称：\n");
			char tempname[20];
			scanf("%s",tempname);
			if(strcmp(user[i].nickname,tempname)==0){
			
            printf("\t\t\t密码：%s\n", user[i].password);
            system("PAUSE");
        }
        else 
		{
		printf("回答错误！\n");
        system("pause");}
            return;
        }
    printf("\t\t\t\t查无此账号！！\n\n\t\t\t");
    
    system("PAUSE");
}
// 修改密码
void EditPassword(void)
{
    int i, K = 0, KK = 0;
    char a[30];
    printf("\t\t\t  请输入要修改密码的账号：\n\t\t\t  ");
    scanf("%s", a);
    for (i = 0; i < numID; i++)
        if (strcmp(user[i].AcName, a) == 0)
        {
            printf("\n\t\t\t   请输入原密码：\n\t\t\t   ");
            scanf("%s", a);
            if (strcmp(user[i].password, a) != 0)
            {
                printf("\n\t\t\t\t密码错误！！\n\n\t\t\t   ");
                system("PAUSE");
                system("cls");
                return;
            }
            printf("\n\t\t\t   请输入新密码：\n\t\t\t   ");
            scanf("%s", a);
            if (strcmp(user[i].password, a) == 0)
            {
                printf("\n\t\t\t新密码与原密码重复，请从新修改！！\n\n\t\t\t   ");
                system("PAUSE");
                system("cls");
                return;
            }
            strcpy(user[i].password, a);
        there:
            printf("\t\t\t   请输入下面的验证码：\n");
            srand((unsigned)time(NULL));
            K = rand();
            printf("\n\t\t\t\t  %d\n\t\t\t\t  ", K);
            atemp = scanf("%d", &KK);
            if (!atemp)
            {
                printf("\t\t\t输入错误！！\n请重新输入：");
                goto there;
                return;
            }
            if (KK != K)
            {
                printf("\n\t\t\t验证码错误！！\n");
                system("PAUSE");
                system("cls");
                return;
            }
            printf("\n\t\t\t\t修改密码成功！！\n");
            saveUser();
            system("PAUSE");
            system("cls");
            return;
        }
    printf("\n\t\t\t\t查无此账号！！\n\n\t\t\t");
    system("PAUSE");
}
// 将账号读入内存
void loadUser(void)
{
    int i;
    FILE* fp;
    fp=fopen("账号.txt","r");
    
    for (i = 0; i < numID; i++)
    {
        fscanf(fp,"%s", user[i].AcName);
        fscanf(fp,"%s", user[i].password);
        fscanf(fp,"%s", user[i].nickname);
    }
	fclose(fp);
}
// 输出账号菜单
void printuser(void)
{
	system("color 0b"); 
    printf("\t\t\t*****************************************************************\n");
    printf("\t\t\t|    	 		     登录 请按 1                    \t|\n");
    printf("\t\t\t|    	 		     注册新账号 请按 2              \t|\n");
    printf("\t\t\t|    	 		     找回密码 请按 3                \t|\n");
    printf("\t\t\t|    	 		     修改密码 请按 4                \t|\n");
    printf("\t\t\t|    		 	     退出程序 请按 5                \t|\n");
    printf("\t\t\t*****************************************************************\n");
}
// 账号登录
int ling()
{
    int sh, i;
    h = logo = 0;
    while (1)
    {
        printuser();
        loaduu();
        loadUser();
    there:
        atemp = scanf("%d", &sh);
        if (!atemp)
        {
            printf("\t\t\t输入错误！！\n请重新输入：");
            goto there;
            continue;
        }
        switch (sh)
        {
        case 1:
            CheckUser();
        system("cls");
            break;
        case 2:
            addUser();
            saveuu();
            system("cls");
            break;
        case 3:
            findPassword();
            system("cls");
            break;
        case 4:
            EditPassword();
            break;
        case 5:
            system("cls");
            printf("\n");
            printf("\t\t\t欢迎下次使用图书管理系统\n");
            return 0;
        default:
            system("cls");
            hhk();
            system("cls");
            break;
        }
        if (logo)
            return 1;
        if (h == 3)
        {
            printf("\t\t\t密码错误三次，系统将自动关闭！！\n\n");
            printf("\t\t\t欢迎下次使用小哥哥的图书管理系统\n");
            return 0;
        }
    }
}

// 文件操作：

// 保存到学生文件中去
void saveToStuFile(const char *fileName, studNode *headNode)
{
    fp_book = fopen(fileName, "w");
    studNode *pMove = headNode->next;
    while (pMove)
    {
        fprintf(fp_student, "%s %d %d %s", pMove->stud.name, pMove->stud.book_num, pMove->stud.student_num, pMove->stud.tel);
        {
            for (int i = 0; i < pMove->stud.book_num; i++)
            {
                fprintf(fp_student, "%s %s %s %s %d %lf", pMove->stud.books[i].name, pMove->stud.books[i].num_ISBN, pMove->stud.books[i].writer, pMove->stud.books[i].publisher, pMove->stud.books[i].num, pMove->stud.books[i].price);
            }
        }
    }
    fclose(fp_book);
}
// 保存到图书文件中去
void saveToBookFile(const char *fileName, Node *headNode)
{
    fp_book = fopen(fileName, "w");
    Node *pMove = headNode->next;
    while (pMove)
    {
        fprintf(fp_book, "%s\t", pMove->books.name);
        fprintf(fp_book, "%s\t", pMove->books.num_ISBN);
        fprintf(fp_book, "%s\t", pMove->books.writer);
        fprintf(fp_book, "%s\t", pMove->books.publisher);
        fprintf(fp_book, "%d\t", pMove->books.num);
        fprintf(fp_book, "%.3lf\n", pMove->books.price);
        pMove = pMove->next;
    }
    fclose(fp_book);
}
//读取文件到内存中 
void readFile(const char *filename, Node *headNode)
{
	error_exit11:

    if ((fp_book = fopen("book.txt", "r"))== NULL)
    {
        printf("------------------------------------------------------\n");
        printf("【在本目录下并没有找到存储图书相关信息的book.txt文件】\n");
        printf("------------------------------------------------------\n");
        printf("请根据系统提示，选择操作：\n");
        printf("1--->手动将book.txt文件导入当前目录下。\n");
        printf("2--->系统自行生产book.txt文件。\n");
        printf("请输入1~2：");
        scanf("%d", &choice);
        
        switch (choice)
        {
        case 1:
            printf("请把名为book.txt的文件复制到当前目录下\n\n");
            printf("如果已将book.txt文件导入，请按Enter键！\n");
            system("pause");
            if ((fp_book = fopen("book.txt", "r"))!= NULL)
            {
            	system("cls"); 
                printf("创 ");
                Sleep(500);
                printf("建 ");
                Sleep(500);
                printf("成 ");
                Sleep(500);
                printf("功！！！");
                Sleep(500);
                system("cls");
            }
            else
            {
            	system("cls"); 
                printf("创建失败!\n请重新操作！\n");
                goto error_exit11;
            }
            break;
        case 2:
        	
            fp_book = fopen("book.txt", "w+");
            system("cls"); 
                printf("创 ");
                Sleep(500);
                printf("建 ");
                Sleep(500);
                printf("成 ");
                Sleep(500);
                printf("功！！！");
                Sleep(500);

                system("cls");
            break;
       }
    }
    Node *tempData=new(Node);
   
    while (fscanf(fp_book, "%s%s%s%s%d%lf", tempData->books.name, tempData->books.num_ISBN, tempData->books.writer, tempData->books.publisher, &tempData->books.num, &tempData->books.price)!=EOF)
    {
    	
        insertNode(Blist, tempData->books);
       // if (feof(fp_book)) break;

    }
	free(tempData);
    fclose(fp_book);


}

// 读取学生文件
void readStuFile(const char *filename, studNode *headNode)
{
error_exit2:
    if ((fp_student = fopen("student.txt", "r+")) == NULL)
    {

        printf("------------------------------------------------------\n");
        printf("【在本目录下并没有找到存储图书相关信息的book.txt文件】\n");
        printf("------------------------------------------------------\n");
        printf("请根据系统提示，选择操作：\n");
        printf("1--->手动将student.txt文件导入当前目录下。\n");
        printf("2--->系统自行生产student.txt文件。\n");
        scanf("%d", &choice);
        switch (choice)
        {
        case 1:
            printf("请把名为student.txt的文件复制到当前目录下\n\n");
            printf("如果已将student.txt文件导入，请按Enter键！\n");
            system("pause");
            if ((fp_student = fopen("student.txt", "r+")) != NULL)
            {
                system("cls");
                printf("创 ");
                Sleep(500);
                printf("建 ");
                Sleep(500);
                printf("成 ");
                Sleep(500);
                printf("功！！！");
                Sleep(500);
            }
            else
            {
                system("cls");
                printf("创建失败!\n请重新操作！\n");
                goto error_exit2;
            }
            break;
        case 2:
            fp_student = fopen("student.txt", "w+");
            system("cls");
            printf("创 ");
            Sleep(500);
            printf("建 ");
            Sleep(500);
            printf("成 ");
            Sleep(500);
            printf("功！！！");
            Sleep(500);

            break;
        }
    }
    studNode *tempData=new(studNode);
    while (fscanf(fp_student, "%s%d%d%s", tempData->stud.name, &tempData->stud.book_num, &tempData->stud.student_num, tempData->stud.tel)!=EOF);
    {
        for (int i = 0; i < tempData->stud.book_num; i++)
        {
            fscanf(fp_student, "%s%s%s%s%d%lf", tempData->stud.books[i].name, tempData->stud.books[i].num_ISBN, tempData->stud.books[i].writer, tempData->stud.books[i].publisher, &tempData->stud.books[i].num, &tempData->stud.books[i].price);

            insertStudNode(Slist, tempData->stud);
            
        }
      //  if (feof(fp_student)) break;
    }
    free(tempData);
    fclose(fp_student);

    
}
//修改界面的功能 
void changeMenu()//* 
{
	system("color 0b");
	printf("=========================================================================");
	printf("|*|\t\t\t\t【修改图书信息】\t\t\t\t|*|\n");
	printf("|*|\t\t\t(1) 【修改书名】  \t\t\t\t|*|\n");
	printf("|*|\t\t\t(2) 【修改出版社】\t\t\t\t|*|\n");
	printf("|*|\t\t\t(3) 【修改数量】  \t\t\t\t|*|\n");
	printf("|*|\t\t\t(4) 【修改ISBN】  \t\t\t\t|*|\n");
	printf("|*|\t\t\t(5) 【修改价钱】  \t\t\t\t|*|\n");
	printf("|*|\t\t\t(6) 【修改作者】  \t\t\t\t|*|\n");
	printf("|*|\t\t\t(7) 【返回界面】  \t\t\t\t|*|\n");
	printf("=========================================================================");
	printf("请输入1~7的数字：\n");
}

int keyChange(Node *posNode)//*
{
	int choice;
	cin>>choice;
	switch (choice){
		case 1:
			char name1[15];
			scanf("%s",name1);
			strcpy(posNode->books.name,name1);
			printf("修改书名成功！\n");
			        	saveToBookFile("book.txt", Blist);
			break;
		case 2:
			char publisher[15];
			scanf("%s",publisher);
			strcpy(posNode->books.publisher,publisher);
			printf("修改出版社成功！\n");
        	saveToBookFile("book.txt", Blist);
			
			break;
		case 3:
			int num;
			cin>>num;
			posNode->books.num=num;
			printf("修改数量成功！\n");
        	saveToBookFile("book.txt", Blist);
			break;
		case 4:
			char ISBN[15];
			cin>>ISBN;
			strcpy(posNode->books.num_ISBN,ISBN);
			printf("修改ISBN成功！\n");
        	saveToBookFile("book.txt", Blist);
			break;
		case 5:
			double price;
			cin>>price;
			posNode->books.price=price;
			printf("修改价钱成功！\n");
			saveToBookFile("book.txt", Blist);
			break;
		case 6:
			char writer[15];
			scanf("%s",writer);
			strcpy(posNode->books.writer,writer);
			printf("修改作者成功！\n");
			saveToBookFile("book.txt", Blist);
			break;
		case 7:			
			printf("\t\t\t\t\t返");
    		Sleep(200);
    		printf("回 ");
    		Sleep(200);
    		printf("上 ");
    		Sleep(200);
    		printf("一 ");
    		Sleep(200);
    		printf("界 ");
    		Sleep(200);
    		printf("面 ");
    		Sleep(200);
   			system("cls");
   			rerx=0;
   			return 0;
			break;
		
	}
	system("cls");
}
//删除界面的功能 
void deleteMenu(){
	rers=1;
	while(rers){
	printf("\n=========================================================================\n");
	printf("|*|\t\t\t\t【删除图书信息】\t\t\t\t|*|\n");
	printf("|*|\t\t\t(1) 【删除书名】  \t\t\t\t|*|\n");
	printf("|*|\t\t\t(2) 【删除出版社】\t\t\t\t|*|\n");
	printf("|*|\t\t\t(3) 【删除ISBN】  \t\t\t\t|*|\n");
	printf("|*|\t\t\t(4) 【删除作者】  \t\t\t\t|*|\n");
	printf("|*|\t\t\t(5) 【返回界面】  \t\t\t\t|*|\n");
	printf("|*|\t\t\t(6) 【删除所有】  \t\t\t\t|*|\n");
	printf("=========================================================================\n");
	printf("请输入1~5的数字：\n");
	
	int choice;
	cin>>choice;
	switch (choice){
		case 1:
			printf("请输入想要删除的书籍的名称：\n");
        	scanf("%s",tempBook.name);
        	deleteNode(Blist, tempBook.name);
        	saveToBookFile("book.txt", Blist);
			printf("根据书名删除成功！\n");
			break;
		case 2:
			printf("请输入想要删除的书籍的出版社：\n");
        	scanf("%s",tempBook.publisher);
        	deletePublisherNode(Blist, tempBook.publisher);
        	saveToBookFile("book.txt", Blist);
			printf("根据出版社删除成功！\n");
			break;
		case 3:
			printf("请输入想要删除的书籍的ISBN：\n");
        	cin >> tempBook.num_ISBN;
        	deleteISBNNode(Blist, tempBook.num_ISBN);
        	saveToBookFile("book.txt", Blist);
			printf("根据ISBN删除成功！\n");
			break;
		case 4:
			printf("请输入想要删除的书籍的作者：\n");
        	scanf("%s",tempBook.writer);
        	deleteWriterNode(Blist, tempBook.writer);
        	saveToBookFile("book.txt", Blist);
			printf("根据作者删除成功！\n");
			break;
		case 5:			
			printf("\t\t\t\t\t返");
    		Sleep(200);
    		printf("回 ");
    		Sleep(200);
    		printf("上 ");
    		Sleep(200);
    		printf("一 ");
    		Sleep(200);
    		printf("界 ");
    		Sleep(200);
    		printf("面 ");
    		Sleep(200);
   			system("cls");
   			rers=0;
   			return;
			break;
		case 6:
		 deleteAll();
		 break;
			default:
				cout<<"输入错误"<<endl;
				system("pause"); 
		
	}
	system("cls");
}	

}

//各种排序界面 
void sortMenu(){
	rerp=1;
	while(rerp){
	printf("=============================================================================\n");
	printf("|*|\t\t\t【】【排序图书信息】【】\t\t\t\t|*|\n");
	printf("|*|\t\t\t\t(1) 【按书名排序】   \t\t\t\t|*|\n");
	printf("|*|\t\t\t\t(2) 【按出版社排序】 \t\t\t\t|*|\n");
	printf("|*|\t\t\t\t(3) 【按ISBN排序】   \t\t\t\t|*|\n");
	printf("|*|\t\t\t\t(4) 【按价格排序】   \t\t\t\t|*|\n");
	printf("|*|\t\t\t\t(5) 【返回界面】  	\t\t\t\t|*|\n");
	printf("=============================================================================\n");
	printf("请输入1~5的数字：\n");
	
	int choice;
	cin>>choice;
	int number;
	switch (choice){
		case 1:
			printf("请输入想要排序的顺序：\n");
			printf("【1】正序\n");
			printf("【2】倒序\n");
			printf("请输入1~2的数字：\n");

			cin>>number;
			switch (number){
				case 1:
					sortNameList1(Blist);
					system("pause");
					system("cls");
					break;
				case 2:
					sortNameList2(Blist);
	system("pause");
					system("cls");
					break;
				default : hhk();
			} 
			printf("根据书名排序成功！\n");
			saveToBookFile("book.txt",Blist);
			break;
		case 2:
			printf("请输入想要排序的顺序：\n");
			printf("【1】正序\n");
			printf("【2】倒序\n");
			printf("请输入1~2的数字：\n");

			cin>>number;
			switch (number){
				case 1:
					sortPublisherList1(Blist);
					system("cls");
					break;
				case 2:
					sortPublisherList2(Blist);
					system("cls");
					break;
				default:hhk();
			} 
			printf("根据出版社排序成功！\n");
			saveToBookFile("book.txt",Blist);
			break;
		case 3:
			printf("请输入想要排序的顺序：\n");
			printf("【1】正序\n");
			printf("【2】倒序\n");
			printf("请输入1~2的数字：\n");
			int number;
			cin>>number;
			switch (number){
				case 1:
					sortISBNList1(Blist);
					system("cls");
					break;
				case 2:
					sortISBNList2(Blist);
					system("cls");
					break;
									default : hhk();
			} 
			printf("根据ISBN排序成功！\n");
			saveToBookFile("book.txt",Blist);
			break;
		case 4:
			printf("请输入想要排序的顺序：\n");
			printf("【1】正序\n");
			printf("【2】倒序\n");
			printf("请输入1~2的数字：\n");

			cin>>number;
			switch (number){
				case 1:
					sortPriceList1(Blist);
					system("cls");
					break;
				case 2:
					sortPriceList2(Blist);
					system("cls");
					break;
							default : hhk();
			} 
			printf("根据价钱排序成功！\n");
			saveToBookFile("book.txt",Blist);
			break;
		case 5:			
			printf("\t\t\t\t\t返");
    		Sleep(200);
    		printf("回 ");
    		Sleep(200);
    		printf("上 ");
    		Sleep(200);
    		printf("一 ");
    		Sleep(200);
    		printf("界 ");
    		Sleep(200);
    		printf("面 ");
    		Sleep(200);
    		rerp=0;
   			system("cls");
   			return;
			break;
			default:
				cout<<"输入错误"<<endl;
				system("pause"); 
		
	}
	system("cls");
}
	
}
void borrowBook(Book temp, studNode *Slist)
{
    studNode *newNode = new studNode;
    char name1[N];
    int student_num1; // 学号
    char tel1[20];    // 电话
    int sexes1;
    printf("请输入借阅同学的名字\t学号\t电话\t性别(1表示男，0表示女)\n");
    scanf("%s%d%s%d", name1, &student_num1, tel1, &sexes1);
    newNode = searchStuNode(Slist, name1);
    if (newNode == NULL)
    {
        strcpy(newNode->stud.name , name1);
        newNode->stud.student_num = student_num1;
		strcpy(newNode->stud.tel , tel1);
		newNode->stud.sexes = sexes1;
        newNode->stud.book_num = 0;
        newNode->stud.books[0] = temp;
        insertStudNode(Slist, newNode->stud);
    }
    else
    {
        if (newNode->stud.book_num >= 4)
        {
            system("color 4");
            printf("借书数目超过五本！\n借书失败！\n");
            system("pause");
            system("color");
            return;
        }
        else
        {
            newNode->stud.book_num++;
            newNode->stud.books[newNode->stud.book_num] = temp;
            printf("借阅成功！\n");
            system("pause");
            system("cls");
        }
    }
}
int findBook(Student &s, Book targetBook) // 假设学生类型为 stud，书籍类型为 Book
{
    for (int i = 0; i < s.book_num; i++) {
        if (strcmp(s.books[i].num_ISBN,targetBook.num_ISBN) == 0) { // 假设每本书籍有唯一的 book_id
            return i;
        }
    }
    return -1;
}

void deleteStuNode(studNode *&Slist, Student s)  // 假设学生类型为 stud，链表节点类型为 studNode
{
    studNode *prev = NULL;
    studNode *curr = Slist;
    while (curr != NULL && strcmp(curr->stud.name,s.name)==0) {
        prev = curr;
        curr = curr->next;
    }
    if (curr == NULL) { // 如果没有找到匹配项，则返回
        return;
    }
    if (prev == NULL) { // 如果要删除的是链表的第一个节点
        Slist = curr->next;
    } else { // 如果要删除的不是第一个节点
        prev->next = curr->next;
    }
    delete curr; // 释放内存
}

void drop(Book temp, studNode *Slist)
{
    studNode *newNode;
    char name[N];
    int student_num; // 学号
    char tel[20];    // 电话
    int sexes;
    printf("请输入归还同学的名字\t学号\t电话\t性别(1表示男，0表示女)\n");
    scanf("%s%d%s%d", name, &student_num, tel, &sexes);
    newNode = searchStuNode(Slist, name);
    if (newNode == NULL)
    {
        newNode = new studNode();
        strcpy(newNode->stud.name ,name);
        newNode->stud.student_num = student_num;
        strcpy(newNode->stud.tel ,tel);
        newNode->stud.sexes = sexes;
        newNode->stud.book_num = 0;
        newNode->stud.books[0] = temp;
        insertStudNode(Slist, newNode->stud);
    }
    else
    {
        int index = findBook(newNode->stud, temp);
        if(index == -1){
            system("color 4");
            printf("该同学未借阅该书籍！\n归还失败！\n");
            system("pause");
            system("color");
            return;
        }
        else
        {
            newNode->stud.books[index] = newNode->stud.books[newNode->stud.book_num - 1];
            newNode->stud.books[newNode->stud.book_num - 1] = temp;
            newNode->stud.book_num--;
            printf("归还成功！\n");
            system("pause");
            system("cls");
            if(newNode->stud.book_num == 0) deleteStuNode(Slist, newNode->stud);  
        }
    }
}
//执行面板 
void keyDown()
{
    int order;
    Book tempBook; // 临时变量存储数据
    scanf("%d", &order);
    Node *temp;
    temp->next = NULL;
    switch (order)
    {
    case 0:
        printf("\n【是否退出？】\n");
        system("pause");
        printf("【退出成功】\n");
        exit(0);
        break;
    case 1:
        printf("\n【借阅】\n");
        printf("请输入想要借阅的书籍的名称：\n");
        scanf("%s",tempBook.name);
        temp = searchBookNode(Blist, tempBook.name);
        if (temp == NULL)
        {
        	system("color 4");
            printf("未找到相关书籍，无法借阅！\n");
            system("color");
        }
        else
        {
            if (temp->books.num > 0)
            {
                temp->books.num--;
                borrowBook(temp->books,Slist);
                printf("借阅成功！\n");
            }
            else
            {
            	system("color 4");
                printf("%s已被借完！\n", "temp->books.name");
            }
        }
        system("pause");
        system("cls");
        system("color");
        saveToStuFile("student.txt",Slist);
        break;
    case 2:
        printf("\n【登记】\n");
        printf("输入书籍的信息\n（书名\t图书编号\t作者\t出版社\t数量\t价格）");
        scanf("%s%s%s%s%d%lf",tempBook.name,tempBook.num_ISBN,tempBook.writer,tempBook.publisher,&tempBook.num,&tempBook.price);
        insertNode(Blist, tempBook);
        saveToBookFile("book.txt", Blist);
        break;
    case 3:

        printf("\n【浏览】\n");
        printList(Blist);
    
        break;
    case 4:
        printf("\n【归还】\n");
        printf("请输入想要归还的书籍的名称：\n");
        scanf("%s",tempBook.name);
        temp = searchBookNode(Blist, tempBook.name);
        if (temp == NULL)
        {
            printf("未找到该书籍，归还错误！\n");
        }
        else
        {
            temp->books.num++;
            drop(temp->books,Slist);
            printf("归还成功！\n");
        }
        system("cls");
        saveToStuFile("student.txt",Slist);
        break;
    case 5:

    	system("cls");
        printf("\n【排序】\n");
        sortMenu(); 
        break;
    case 6:
    	while(rers){
		
    	system("cls");
        printf("\n【删除】\n");
        deleteMenu();
        saveToBookFile("book.txt", Blist);
    }
        
        break;
    case 7:
    	system("cls");
        printf("\n【查找】\n");
        printf("请输入想要查找的书名：");
        scanf("%s",tempBook.name);
        temp = searchBookNode(Blist, tempBook.name);
        if (temp == NULL)
        {
            printf("未找到相关信息！\n");
        }
        else
        {
            scanf("%s%s%s%s%d%lf", tempBook.name, tempBook.num_ISBN, tempBook.writer, tempBook.publisher, &tempBook.num, &tempBook.price);
            printf("书籍的信息：\n（书名 图书编号 作者 出版社 数量 价格）\n");
            printf("%s\t%s\t%s\t%s\t%d\t%lf\n", temp->books.name, temp->books.num_ISBN, temp->books.writer, temp->books.publisher, temp->books.num, temp->books.price);
        }
        break;
    case 8:
    	system("cls");
        printf("\n【借书同学名单】\n");
        printStuList(Slist); 
        break;
    case 9:
    	system("cls");
        printf("\n【查询学生所借阅书籍的详细信息】\n");
        printf("请输入想要查询的学生的姓名：");
        char tempName2[20];
        scanf("%s",tempName2);
        printBorrowList(Slist, tempName2);
        break;
    case 10:
    	system("cls");
    	printf("\n【账号菜单】\n");
        ling();

        break;
    case 11:
    	system("cls");
    	printf("\n【修改书籍】\n");
        printf("请输入要修改书籍的ISBN号码：\n"); 
    	char ISBN[30];
    	cin>>ISBN;
		Node * posNode=searchISBNNode(Blist,ISBN);
		printf( "%s\t%s\t%s\t%s\t%d\t%lf\n", posNode->books.name, posNode->books.num_ISBN, posNode->books.writer, posNode->books.publisher, posNode->books.num, posNode->books.price);
		while(rerc)
		{
			changeMenu();
			keyChange(posNode);
			system("cls");
		}
		
    }
    system("cls");
}
// 界面
void makeMenu()
{
    printf("+================================================+\n");
    printf("+\t\t欢迎光临图书管理系统平台        +\n");
    printf("+================================================+\n");
    printf("\t\t0 【退出系统】\n");
    printf("\t\t1 【借阅书籍】\n");
    printf("\t\t2 【登记书籍】\n");
    printf("\t\t3 【浏览书籍】\n");
    printf("\t\t4 【归还书籍】\n");
    printf("\t\t5 【书籍排序】\n");
    printf("\t\t6 【删除书籍】\n");
    printf("\t\t7 【查找书籍】\n");
    printf("\t\t8 【借书同学】\n");
    printf("\t\t9 【借阅情况】\n");
    printf("\t\t10【账号菜单】\n");
    printf("\t\t11【修改书籍】\n");
    printf("+===============================================+\n");
    printf("请输入0~10的数字：\n");
}
void saveuu(void);                                          // 数据数加载到磁盘
Node *createHead();                                         // 创建表头： 带节点的表头
Node *createNode(Book data);                                // 创建节点： 插入必备
void prinList(Node *headNode);                              // 打印图书链表
void printStuList(studNode *headNode);                      // 打印借书同学
void printBorrowList(studNode *headNode, char *stuName);    // 打印同学所借书的详细信息
void insertNode(Node *headNode, Book data);                 // 表头法插入法
void deleteNode(Node *headNode, char *bookName);            // 指定删除节点(根据书名删除）
Node *searchBookNode(Node *headNode, char *bookName);       // 链表的书名查找
studNode *searchStuNode(studNode *headNode, char *stuName); // 链表的人名查找
void bulleSortList(Node *headNode);                         // 冒泡排序链表(按照价格排序)
void DeleteAll();                                           // 删除所有信息********************************************
void bulleSortNameList(Node *headNode);                     // 冒泡排序（按照书名首字母排序） ****
void CheckUser(void);                                       // 检验账号的合法性*****************************************************************************************************************************************************
void saveUser(void);                                        // 将账号存入磁盘
void addUser(void);                                         // 新建账号
void findPassword(void);                                    // 找回密码
void EditPassword(void);                                    // 修改密码
void loadUser(void);                                        // 将账号读入内存
void printuser(void);                                       // 输出账号菜单
int ling(void);                                             // 账号登录
void makeMenu();                                            // 主菜单页面
void saveToStuFile(const char *fileName, Node *headNode);   // 保存到学生文件中去
void saveToBookFile(const char *fileName, Node *headNode);  // 保存到图书文件中去
void readFile(const char *filename, Node *headNode);        // 读图书文件
void readStuFile(const char *filename, Node *headNode);     // 读取学生文件
void keyDown();                                             // 人机交互界面
void loadBorrow(Student *head);                             // 将借书记录加载到内存

int main()
{
	printf("加载中。。。。\n");
	Blist = createHead();         // 对于图书操作的操作的链表
Dlist = createHead();         // 对于密码账号登录操作的链表
Slist = createStudHead(); // 对于借书学生信息的链表   
   readFile("book.txt", Blist);
    readStuFile("student.txt", Slist);

    system("cls");
    printf("\t\t\t\t\t欢 ");
    Sleep(100);
    printf("迎 ");
    Sleep(100);
    printf("使 ");
    Sleep(100);
    printf("用 ");
    Sleep(100);
    printf("图 ");
    Sleep(100);
    printf("书 ");
    Sleep(100);
    printf("管 ");
    Sleep(100);
    printf("理 ");
    Sleep(100);
    printf("系 ");
    Sleep(100);
    printf("统 ");
    Sleep(100);
    system("cls");


        ling();
        while(rer){
        makeMenu();
    	keyDown();
    	system("pause");
    	system("cls");
}
    return 0;
}
